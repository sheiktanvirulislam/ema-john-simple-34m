import React, { useContext, useState } from 'react';
import { initializeApp } from 'firebase/app';
import { firebaseConfig } from './firebaseConfig';
import { getAuth, signInWithPopup, GoogleAuthProvider,signOut, createUserWithEmailAndPassword , signInWithEmailAndPassword,updateProfile, FacebookAuthProvider } from "firebase/auth";
import './login.css'
import 'bootstrap/dist/css/bootstrap.min.css';
import { UserContext } from '../../App';
import { useHistory, useLocation } from 'react-router';


const app = initializeApp(firebaseConfig);


function Login() {
  const provider = new GoogleAuthProvider(); 
  const fbProvider = new FacebookAuthProvider();
  const auth = getAuth();
  const[isNewUser,setNewUser] = useState(false)
  const[user,setUser] = useState({
    name:"",
    isSignedIn:false,
    photoURL:"",
    password:"",
    email:"",
    error:"",
    successMessage:false,
    
  })
  const[loggedInUser,setLoggedInUser] = useContext(UserContext) 
  let history = useHistory();
  let location = useLocation();
  let { from } = location.state || { from: { pathname: "/" } };
  const handleSignIn = () => {
    signInWithPopup(auth, provider)
    .then(result =>{
      const credential = GoogleAuthProvider.credentialFromResult(result);
      const token = credential.accessToken;
      // The signed-in user info.
       const {displayName,photoURL,email} = result.user
      
       const users = {
         name:displayName,
         photoURL: photoURL,
         email:email,
         isSignedIn:true
       }
       setUser(users)
    })
   }
   const handleSignOut = () => {
     signOut(auth)
     .then(result => {
       const signOutUser ={
        name:"",
        isSignedIn:false,
        photoURL:"",
        email:"",
       }
       setUser(signOutUser)
     })
   }
   
   
   
   
   const handleBlur = (event) => {
      let isFieldValid = true;
      if (event.target.name === 'email') {
        isFieldValid = /\S+@\S+\.\S+/.test(event.target.value);
        
      }
     
      if (event.target.name === 'password') {
        const isValidPassword = event.target.value.length> 8;
        const passwordNum = /\d{1}/.test(event.target.value)
        isFieldValid = isValidPassword && passwordNum;
        console.log(isFieldValid)
      
      }
      if (isFieldValid) {
        const updateUserInfo = {...user}
        updateUserInfo[event.target.name] = event.target.value;
        setUser(updateUserInfo)
        

      }
    }
    const handleSubmit = (event) => {
      
      if ( isNewUser && user.email && user.password) {
        

        const auth = getAuth();
        createUserWithEmailAndPassword(auth, user.email, user.password)
          .then((userCredential) => {
            // Signed in 
            const allUser = userCredential.user;
            const newUser = {...user}
            console.log(allUser.email, allUser)
            newUser.error = "";
            newUser.successMessage = true;

            setUser(newUser) 
            updateUser(user.name)

            // ...
          })
          .catch((error) => {
            
            const newUser = {...user}
            
            const errorCode = error.code;
            const errorMessage = error.message;
            newUser.error = errorMessage;
            newUser.successMessage = false;
            setUser(newUser);
            console.log(errorMessage,errorCode)

            // ..
          })

      }
      if (!isNewUser && user.email && user.password) {
        const auth = getAuth();
        signInWithEmailAndPassword(auth, user.email, user.password)
        .then((userCredential) => {
    // Signed in 
         const someUser = userCredential.user;
         const newUser = {...user}
          
            newUser.error = "";
            newUser.successMessage = true;
            setUser(newUser) 
            setLoggedInUser(newUser); 
            history.replace(from);
            console.log("sign in user info",someUser);
    // ...
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    
    const newUser = {...user}
            
    
   
    newUser.error = errorMessage;
    newUser.successMessage = false;
    setUser(newUser);
  });
      }
      event.preventDefault();
    }
   const updateUser = (name) =>{
    const auth = getAuth();
    updateProfile(auth.currentUser, {
      displayName: name,
      

    }).then(() => {
      console.log("user name updated")
      // ...
    }).catch((error) => {
      // An error occurred
      // ...
      console.log(error)
    });
      
   }
   const handleFacebookLogIn = () =>{
    const auth = getAuth();
    signInWithPopup(auth, fbProvider)
      .then((result) => {
        // The signed-in user info.
        const user2 = result.user;
         console.log("",user2)  
        // This gives you a Facebook Access Token. You can use it to access the Facebook API.
        const credential = FacebookAuthProvider.credentialFromResult(result);
        const accessToken = credential.accessToken;
    
        // ...
      })
      .catch((error) => {
        // Handle Errors here.
        const errorCode = error.code;
        const errorMessage = error.message;
        // The email of the user's account used.
        const email = error.email;
        // The AuthCredential type that was used.
        const credential = FacebookAuthProvider.credentialFromError(error);
    
        // ...
      });
   }
  return (
    <div className="App2">
      {/* GoogleSignInActionStart */}
       {
         user.isSignedIn ? <button className="btn btn-primary" onClick={handleSignOut}>Sign Out</button> :  <button className="btn btn-success" onClick={handleSignIn}>Sign In</button>
       }  
       <br />
       <button className="btn btn-primary half " onClick={handleFacebookLogIn} >Sign in with Facebook</button>
       
       {
         user.isSignedIn ? <div>
           <h1>Welcome:{user.displayName}</h1>
       <img src={user.photoURL} alt="" />
       <h1>Email:{user.email}</h1>
         </div>: <h1>404 Error</h1>
       }
      {/* GoogleSignInActionEnds */}
      {/*Login FORM Start*/}
     <div className="card">
     <h1>Our Authenticaton</h1> 
      <div className="control">
      <input type="checkbox" onChange={()=> setNewUser(!isNewUser)} name="newUser" id="" className="control" />
      <label htmlFor="newUser">New User Sign Up</label>
      </div>
       
       <form onSubmit={handleSubmit} className="">
      { isNewUser && <input type="text" name="name" onBlur={handleBlur} className="form-control" placeholder="enter your name"/>}
       <br />
       <input type="text" onBlur={handleBlur} className="form-control" name="email" id="" placeholder="type your email" required />
       <br />
       <input type="password" className="form-control" onBlur={handleBlur} name="password" id="" placeholder="type your password" required /> 
       <br />
      <input type="submit"   value={isNewUser ? "Sign In":"Sign Up" } className="btn btn-primary"/>
      
      </form>
      
     </div>
      <h1 style={{color: 'red'}}>{user.error}</h1>
       {user.successMessage && <h1 style={{color: 'green'}}>User {isNewUser ? 'Created':"Logged In"} Successfully</h1>}
    </div>
  );
}

export default Login;

